// Copyright (c) 2023 MASSA LABS <info@massa.net>

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: operation.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible statuses for an operation
type OperationStatus int32

const (
	OperationStatus_OPERATION_STATUS_UNSPECIFIED OperationStatus = 0 // Defaut enum value
	OperationStatus_OPERATION_STATUS_PENDING     OperationStatus = 1 // The operation is still pending
	OperationStatus_OPERATION_STATUS_FINAL       OperationStatus = 2 // The operation is final
	OperationStatus_OPERATION_STATUS_SUCCESS     OperationStatus = 3 // The operation was executed successfully
	OperationStatus_OPERATION_STATUS_FAILURE     OperationStatus = 4 // The operation failed to execute
	OperationStatus_OPERATION_STATUS_UNKNOWN     OperationStatus = 5 // The status of the operation is unknown
)

// Enum value maps for OperationStatus.
var (
	OperationStatus_name = map[int32]string{
		0: "OPERATION_STATUS_UNSPECIFIED",
		1: "OPERATION_STATUS_PENDING",
		2: "OPERATION_STATUS_FINAL",
		3: "OPERATION_STATUS_SUCCESS",
		4: "OPERATION_STATUS_FAILURE",
		5: "OPERATION_STATUS_UNKNOWN",
	}
	OperationStatus_value = map[string]int32{
		"OPERATION_STATUS_UNSPECIFIED": 0,
		"OPERATION_STATUS_PENDING":     1,
		"OPERATION_STATUS_FINAL":       2,
		"OPERATION_STATUS_SUCCESS":     3,
		"OPERATION_STATUS_FAILURE":     4,
		"OPERATION_STATUS_UNKNOWN":     5,
	}
)

func (x OperationStatus) Enum() *OperationStatus {
	p := new(OperationStatus)
	*p = x
	return p
}

func (x OperationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_operation_proto_enumTypes[0].Descriptor()
}

func (OperationStatus) Type() protoreflect.EnumType {
	return &file_operation_proto_enumTypes[0]
}

func (x OperationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationStatus.Descriptor instead.
func (OperationStatus) EnumDescriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{0}
}

// The operation as sent in the network
type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fee they have decided for this operation
	Fee uint64 `protobuf:"fixed64,1,opt,name=fee,proto3" json:"fee,omitempty"`
	// After `expire_period` slot the operation won't be included in a block
	ExpirePeriod uint64 `protobuf:"fixed64,2,opt,name=expire_period,json=expirePeriod,proto3" json:"expire_period,omitempty"`
	// The type specific operation part
	Op *OperationType `protobuf:"bytes,3,opt,name=op,proto3" json:"op,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{0}
}

func (x *Operation) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Operation) GetExpirePeriod() uint64 {
	if x != nil {
		return x.ExpirePeriod
	}
	return 0
}

func (x *Operation) GetOp() *OperationType {
	if x != nil {
		return x.Op
	}
	return nil
}

// Type specific operation content
type OperationType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transfer coins from sender to recipient
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// The sender buys `roll_count` rolls. Roll price is defined in configuration
	RollBuy *RollBuy `protobuf:"bytes,2,opt,name=roll_buy,json=rollBuy,proto3" json:"roll_buy,omitempty"`
	// The sender sells `roll_count` rolls. Roll price is defined in configuration
	RollSell *RollSell `protobuf:"bytes,3,opt,name=roll_sell,json=rollSell,proto3" json:"roll_sell,omitempty"`
	// Execute a smart contract
	ExecutSc *ExecuteSC `protobuf:"bytes,4,opt,name=execut_sc,json=executSc,proto3" json:"execut_sc,omitempty"`
	// Calls an exported function from a stored smart contract
	CallSc *CallSC `protobuf:"bytes,5,opt,name=call_sc,json=callSc,proto3" json:"call_sc,omitempty"`
}

func (x *OperationType) Reset() {
	*x = OperationType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationType) ProtoMessage() {}

func (x *OperationType) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationType.ProtoReflect.Descriptor instead.
func (*OperationType) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{1}
}

func (x *OperationType) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *OperationType) GetRollBuy() *RollBuy {
	if x != nil {
		return x.RollBuy
	}
	return nil
}

func (x *OperationType) GetRollSell() *RollSell {
	if x != nil {
		return x.RollSell
	}
	return nil
}

func (x *OperationType) GetExecutSc() *ExecuteSC {
	if x != nil {
		return x.ExecutSc
	}
	return nil
}

func (x *OperationType) GetCallSc() *CallSC {
	if x != nil {
		return x.CallSc
	}
	return nil
}

// Transfer coins from sender to recipient
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Recipient address
	RecipientAddress string `protobuf:"bytes,1,opt,name=recipient_address,json=recipientAddress,proto3" json:"recipient_address,omitempty"`
	// Amount
	Amount uint64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{2}
}

func (x *Transaction) GetRecipientAddress() string {
	if x != nil {
		return x.RecipientAddress
	}
	return ""
}

func (x *Transaction) GetAmount() uint64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// The sender buys `roll_count` rolls. Roll price is defined in configuration
type RollBuy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Roll count
	RollCount uint64 `protobuf:"fixed64,1,opt,name=roll_count,json=rollCount,proto3" json:"roll_count,omitempty"`
}

func (x *RollBuy) Reset() {
	*x = RollBuy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollBuy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollBuy) ProtoMessage() {}

func (x *RollBuy) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollBuy.ProtoReflect.Descriptor instead.
func (*RollBuy) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{3}
}

func (x *RollBuy) GetRollCount() uint64 {
	if x != nil {
		return x.RollCount
	}
	return 0
}

// The sender sells `roll_count` rolls. Roll price is defined in configuration
type RollSell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Roll count
	RollCount uint64 `protobuf:"fixed64,1,opt,name=roll_count,json=rollCount,proto3" json:"roll_count,omitempty"`
}

func (x *RollSell) Reset() {
	*x = RollSell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RollSell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RollSell) ProtoMessage() {}

func (x *RollSell) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RollSell.ProtoReflect.Descriptor instead.
func (*RollSell) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{4}
}

func (x *RollSell) GetRollCount() uint64 {
	if x != nil {
		return x.RollCount
	}
	return 0
}

// Execute a smart contract
type ExecuteSC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Smart contract bytecode.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The maximum of coins that could be spent by the operation sender
	MaxCoins uint64 `protobuf:"fixed64,2,opt,name=max_coins,json=maxCoins,proto3" json:"max_coins,omitempty"`
	// The maximum amount of gas that the execution of the contract is allowed to cost
	MaxGas uint64 `protobuf:"fixed64,3,opt,name=max_gas,json=maxGas,proto3" json:"max_gas,omitempty"`
	// A key-value store associating a hash to arbitrary bytes
	Datastore []*BytesMapFieldEntry `protobuf:"bytes,4,rep,name=datastore,proto3" json:"datastore,omitempty"`
}

func (x *ExecuteSC) Reset() {
	*x = ExecuteSC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSC) ProtoMessage() {}

func (x *ExecuteSC) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSC.ProtoReflect.Descriptor instead.
func (*ExecuteSC) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{5}
}

func (x *ExecuteSC) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ExecuteSC) GetMaxCoins() uint64 {
	if x != nil {
		return x.MaxCoins
	}
	return 0
}

func (x *ExecuteSC) GetMaxGas() uint64 {
	if x != nil {
		return x.MaxGas
	}
	return 0
}

func (x *ExecuteSC) GetDatastore() []*BytesMapFieldEntry {
	if x != nil {
		return x.Datastore
	}
	return nil
}

// Calls an exported function from a stored smart contract
type CallSC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target smart contract address
	TargetAddr string `protobuf:"bytes,1,opt,name=target_addr,json=targetAddr,proto3" json:"target_addr,omitempty"`
	// Target function name. No function is called if empty
	TargetFunc string `protobuf:"bytes,2,opt,name=target_func,json=targetFunc,proto3" json:"target_func,omitempty"`
	// Parameter to pass to the target function
	Param []byte `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
	// The maximum amount of gas that the execution of the contract is allowed to cost
	MaxGas uint64 `protobuf:"fixed64,4,opt,name=max_gas,json=maxGas,proto3" json:"max_gas,omitempty"`
	// Extra coins that are spent from the caller's balance and transferred to the target
	Coins uint64 `protobuf:"fixed64,5,opt,name=coins,proto3" json:"coins,omitempty"`
}

func (x *CallSC) Reset() {
	*x = CallSC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallSC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallSC) ProtoMessage() {}

func (x *CallSC) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallSC.ProtoReflect.Descriptor instead.
func (*CallSC) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{6}
}

func (x *CallSC) GetTargetAddr() string {
	if x != nil {
		return x.TargetAddr
	}
	return ""
}

func (x *CallSC) GetTargetFunc() string {
	if x != nil {
		return x.TargetFunc
	}
	return ""
}

func (x *CallSC) GetParam() []byte {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *CallSC) GetMaxGas() uint64 {
	if x != nil {
		return x.MaxGas
	}
	return 0
}

func (x *CallSC) GetCoins() uint64 {
	if x != nil {
		return x.Coins
	}
	return 0
}

// Signed operation
type SignedOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Operation
	Content *Operation `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// A cryptographically generated value using `serialized_data` and a public key.
	Signature string `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// The public-key component used in the generation of the signature
	ContentCreatorPubKey string `protobuf:"bytes,3,opt,name=content_creator_pub_key,json=contentCreatorPubKey,proto3" json:"content_creator_pub_key,omitempty"`
	// Derived from the same public key used to generate the signature
	ContentCreatorAddress string `protobuf:"bytes,4,opt,name=content_creator_address,json=contentCreatorAddress,proto3" json:"content_creator_address,omitempty"`
	// A secure hash of the data. See also [massa_hash::Hash]
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SignedOperation) Reset() {
	*x = SignedOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedOperation) ProtoMessage() {}

func (x *SignedOperation) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedOperation.ProtoReflect.Descriptor instead.
func (*SignedOperation) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{7}
}

func (x *SignedOperation) GetContent() *Operation {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SignedOperation) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *SignedOperation) GetContentCreatorPubKey() string {
	if x != nil {
		return x.ContentCreatorPubKey
	}
	return ""
}

func (x *SignedOperation) GetContentCreatorAddress() string {
	if x != nil {
		return x.ContentCreatorAddress
	}
	return ""
}

func (x *SignedOperation) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// A wrapper around an operation with its metadata
type OperationWrapper struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique ID of the operation.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The IDs of the blocks in which the operation appears
	BlockIds []string `protobuf:"bytes,3,rep,name=block_ids,json=blockIds,proto3" json:"block_ids,omitempty"`
	// The thread in which the operation can be included
	Thread uint32 `protobuf:"fixed32,5,opt,name=thread,proto3" json:"thread,omitempty"`
	// The operation object itself
	Operation *SignedOperation `protobuf:"bytes,6,opt,name=operation,proto3" json:"operation,omitempty"`
	// The execution statuses of the operation
	Status []OperationStatus `protobuf:"varint,7,rep,packed,name=status,proto3,enum=massa.api.v1.OperationStatus" json:"status,omitempty"`
}

func (x *OperationWrapper) Reset() {
	*x = OperationWrapper{}
	if protoimpl.UnsafeEnabled {
		mi := &file_operation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationWrapper) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationWrapper) ProtoMessage() {}

func (x *OperationWrapper) ProtoReflect() protoreflect.Message {
	mi := &file_operation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationWrapper.ProtoReflect.Descriptor instead.
func (*OperationWrapper) Descriptor() ([]byte, []int) {
	return file_operation_proto_rawDescGZIP(), []int{8}
}

func (x *OperationWrapper) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *OperationWrapper) GetBlockIds() []string {
	if x != nil {
		return x.BlockIds
	}
	return nil
}

func (x *OperationWrapper) GetThread() uint32 {
	if x != nil {
		return x.Thread
	}
	return 0
}

func (x *OperationWrapper) GetOperation() *SignedOperation {
	if x != nil {
		return x.Operation
	}
	return nil
}

func (x *OperationWrapper) GetStatus() []OperationStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_operation_proto protoreflect.FileDescriptor

var file_operation_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6f, 0x0a,
	0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x2b, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02, 0x6f, 0x70, 0x22, 0x98,
	0x02, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x6f, 0x6c, 0x6c, 0x42, 0x75, 0x79, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x42, 0x75, 0x79, 0x12,
	0x33, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c,
	0x53, 0x65, 0x6c, 0x6c, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x5f, 0x73,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x43,
	0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x53, 0x63, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61,
	0x73, 0x73, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53,
	0x43, 0x52, 0x06, 0x63, 0x61, 0x6c, 0x6c, 0x53, 0x63, 0x22, 0x52, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x28, 0x0a,
	0x07, 0x52, 0x6f, 0x6c, 0x6c, 0x42, 0x75, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x72, 0x6f,
	0x6c, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x53,
	0x65, 0x6c, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x43,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x69, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x47, 0x61, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x06, 0x43,
	0x61, 0x6c, 0x6c, 0x53, 0x43, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x17, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x5f, 0x67, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x06,
	0x6d, 0x61, 0x78, 0x47, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x05, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x22, 0xe1, 0x01, 0x0a,
	0x0f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x35, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xcb, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0xc7,
	0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x42, 0xa1, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x61, 0x73, 0x73,
	0x61, 0x6c, 0x61, 0x62, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x73, 0x61, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x3b, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x4d, 0x41, 0x58, 0xaa, 0x02, 0x0c, 0x4d, 0x61,
	0x73, 0x73, 0x61, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0xba, 0x02, 0x04, 0x47, 0x52, 0x50,
	0x43, 0xca, 0x02, 0x0c, 0x4d, 0x61, 0x73, 0x73, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31,
	0xe2, 0x02, 0x18, 0x4d, 0x61, 0x73, 0x73, 0x61, 0x5c, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0e, 0x4d, 0x61,
	0x73, 0x73, 0x61, 0x3a, 0x3a, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_operation_proto_rawDescOnce sync.Once
	file_operation_proto_rawDescData = file_operation_proto_rawDesc
)

func file_operation_proto_rawDescGZIP() []byte {
	file_operation_proto_rawDescOnce.Do(func() {
		file_operation_proto_rawDescData = protoimpl.X.CompressGZIP(file_operation_proto_rawDescData)
	})
	return file_operation_proto_rawDescData
}

var file_operation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_operation_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_operation_proto_goTypes = []interface{}{
	(OperationStatus)(0),       // 0: massa.api.v1.OperationStatus
	(*Operation)(nil),          // 1: massa.api.v1.Operation
	(*OperationType)(nil),      // 2: massa.api.v1.OperationType
	(*Transaction)(nil),        // 3: massa.api.v1.Transaction
	(*RollBuy)(nil),            // 4: massa.api.v1.RollBuy
	(*RollSell)(nil),           // 5: massa.api.v1.RollSell
	(*ExecuteSC)(nil),          // 6: massa.api.v1.ExecuteSC
	(*CallSC)(nil),             // 7: massa.api.v1.CallSC
	(*SignedOperation)(nil),    // 8: massa.api.v1.SignedOperation
	(*OperationWrapper)(nil),   // 9: massa.api.v1.OperationWrapper
	(*BytesMapFieldEntry)(nil), // 10: massa.api.v1.BytesMapFieldEntry
}
var file_operation_proto_depIdxs = []int32{
	2,  // 0: massa.api.v1.Operation.op:type_name -> massa.api.v1.OperationType
	3,  // 1: massa.api.v1.OperationType.transaction:type_name -> massa.api.v1.Transaction
	4,  // 2: massa.api.v1.OperationType.roll_buy:type_name -> massa.api.v1.RollBuy
	5,  // 3: massa.api.v1.OperationType.roll_sell:type_name -> massa.api.v1.RollSell
	6,  // 4: massa.api.v1.OperationType.execut_sc:type_name -> massa.api.v1.ExecuteSC
	7,  // 5: massa.api.v1.OperationType.call_sc:type_name -> massa.api.v1.CallSC
	10, // 6: massa.api.v1.ExecuteSC.datastore:type_name -> massa.api.v1.BytesMapFieldEntry
	1,  // 7: massa.api.v1.SignedOperation.content:type_name -> massa.api.v1.Operation
	8,  // 8: massa.api.v1.OperationWrapper.operation:type_name -> massa.api.v1.SignedOperation
	0,  // 9: massa.api.v1.OperationWrapper.status:type_name -> massa.api.v1.OperationStatus
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_operation_proto_init() }
func file_operation_proto_init() {
	if File_operation_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_operation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollBuy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RollSell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallSC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_operation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationWrapper); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_operation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_operation_proto_goTypes,
		DependencyIndexes: file_operation_proto_depIdxs,
		EnumInfos:         file_operation_proto_enumTypes,
		MessageInfos:      file_operation_proto_msgTypes,
	}.Build()
	File_operation_proto = out.File
	file_operation_proto_rawDesc = nil
	file_operation_proto_goTypes = nil
	file_operation_proto_depIdxs = nil
}
