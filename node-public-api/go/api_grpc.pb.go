// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MassaServiceClient is the client API for MassaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MassaServiceClient interface {
	// Get blocks by ids
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error)
	// Get blocks by slots
	GetBlocksBySlots(ctx context.Context, in *GetBlocksBySlotsRequest, opts ...grpc.CallOption) (*GetBlocksBySlotsResponse, error)
	// Get datastore entries
	GetDatastoreEntries(ctx context.Context, in *GetDatastoreEntriesRequest, opts ...grpc.CallOption) (*GetDatastoreEntriesResponse, error)
	// Get largest stakers
	GetLargestStakers(ctx context.Context, in *GetLargestStakersRequest, opts ...grpc.CallOption) (*GetLargestStakersResponse, error)
	// Get next block best parents
	GetNextBlockBestParents(ctx context.Context, in *GetNextBlockBestParentsRequest, opts ...grpc.CallOption) (*GetNextBlockBestParentsResponse, error)
	// Get operations
	GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error)
	// Get smart contracts execution events
	GetScExecutionEvents(ctx context.Context, in *GetScExecutionEventsRequest, opts ...grpc.CallOption) (*GetScExecutionEventsResponse, error)
	// Get selector draws
	GetSelectorDraws(ctx context.Context, in *GetSelectorDrawsRequest, opts ...grpc.CallOption) (*GetSelectorDrawsResponse, error)
	// Get transactions throughput
	GetTransactionsThroughput(ctx context.Context, in *GetTransactionsThroughputRequest, opts ...grpc.CallOption) (*GetTransactionsThroughputResponse, error)
	// Get node version
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// New received and produced blocks
	NewBlocks(ctx context.Context, opts ...grpc.CallOption) (MassaService_NewBlocksClient, error)
	// New received and produced blocks headers
	NewBlocksHeaders(ctx context.Context, opts ...grpc.CallOption) (MassaService_NewBlocksHeadersClient, error)
	// New received and produced endorsements
	NewEndorsements(ctx context.Context, opts ...grpc.CallOption) (MassaService_NewEndorsementsClient, error)
	// New received and produced blocks with operations
	NewFilledBlocks(ctx context.Context, opts ...grpc.CallOption) (MassaService_NewFilledBlocksClient, error)
	// New received and produced operations
	NewOperations(ctx context.Context, opts ...grpc.CallOption) (MassaService_NewOperationsClient, error)
	// New received and slot execution events
	NewSlotExecutionOutputs(ctx context.Context, opts ...grpc.CallOption) (MassaService_NewSlotExecutionOutputsClient, error)
	// Send blocks
	SendBlocks(ctx context.Context, opts ...grpc.CallOption) (MassaService_SendBlocksClient, error)
	// Send endorsements
	SendEndorsements(ctx context.Context, opts ...grpc.CallOption) (MassaService_SendEndorsementsClient, error)
	// Send operations
	SendOperations(ctx context.Context, opts ...grpc.CallOption) (MassaService_SendOperationsClient, error)
	// Transactions throughput
	TransactionsThroughput(ctx context.Context, opts ...grpc.CallOption) (MassaService_TransactionsThroughputClient, error)
}

type massaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMassaServiceClient(cc grpc.ClientConnInterface) MassaServiceClient {
	return &massaServiceClient{cc}
}

func (c *massaServiceClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksResponse, error) {
	out := new(GetBlocksResponse)
	err := c.cc.Invoke(ctx, "/massa.api.v1.MassaService/GetBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *massaServiceClient) GetBlocksBySlots(ctx context.Context, in *GetBlocksBySlotsRequest, opts ...grpc.CallOption) (*GetBlocksBySlotsResponse, error) {
	out := new(GetBlocksBySlotsResponse)
	err := c.cc.Invoke(ctx, "/massa.api.v1.MassaService/GetBlocksBySlots", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *massaServiceClient) GetDatastoreEntries(ctx context.Context, in *GetDatastoreEntriesRequest, opts ...grpc.CallOption) (*GetDatastoreEntriesResponse, error) {
	out := new(GetDatastoreEntriesResponse)
	err := c.cc.Invoke(ctx, "/massa.api.v1.MassaService/GetDatastoreEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *massaServiceClient) GetLargestStakers(ctx context.Context, in *GetLargestStakersRequest, opts ...grpc.CallOption) (*GetLargestStakersResponse, error) {
	out := new(GetLargestStakersResponse)
	err := c.cc.Invoke(ctx, "/massa.api.v1.MassaService/GetLargestStakers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *massaServiceClient) GetNextBlockBestParents(ctx context.Context, in *GetNextBlockBestParentsRequest, opts ...grpc.CallOption) (*GetNextBlockBestParentsResponse, error) {
	out := new(GetNextBlockBestParentsResponse)
	err := c.cc.Invoke(ctx, "/massa.api.v1.MassaService/GetNextBlockBestParents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *massaServiceClient) GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error) {
	out := new(GetOperationsResponse)
	err := c.cc.Invoke(ctx, "/massa.api.v1.MassaService/GetOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *massaServiceClient) GetScExecutionEvents(ctx context.Context, in *GetScExecutionEventsRequest, opts ...grpc.CallOption) (*GetScExecutionEventsResponse, error) {
	out := new(GetScExecutionEventsResponse)
	err := c.cc.Invoke(ctx, "/massa.api.v1.MassaService/GetScExecutionEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *massaServiceClient) GetSelectorDraws(ctx context.Context, in *GetSelectorDrawsRequest, opts ...grpc.CallOption) (*GetSelectorDrawsResponse, error) {
	out := new(GetSelectorDrawsResponse)
	err := c.cc.Invoke(ctx, "/massa.api.v1.MassaService/GetSelectorDraws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *massaServiceClient) GetTransactionsThroughput(ctx context.Context, in *GetTransactionsThroughputRequest, opts ...grpc.CallOption) (*GetTransactionsThroughputResponse, error) {
	out := new(GetTransactionsThroughputResponse)
	err := c.cc.Invoke(ctx, "/massa.api.v1.MassaService/GetTransactionsThroughput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *massaServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, "/massa.api.v1.MassaService/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *massaServiceClient) NewBlocks(ctx context.Context, opts ...grpc.CallOption) (MassaService_NewBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &MassaService_ServiceDesc.Streams[0], "/massa.api.v1.MassaService/NewBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &massaServiceNewBlocksClient{stream}
	return x, nil
}

type MassaService_NewBlocksClient interface {
	Send(*NewBlocksRequest) error
	Recv() (*NewBlocksResponse, error)
	grpc.ClientStream
}

type massaServiceNewBlocksClient struct {
	grpc.ClientStream
}

func (x *massaServiceNewBlocksClient) Send(m *NewBlocksRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *massaServiceNewBlocksClient) Recv() (*NewBlocksResponse, error) {
	m := new(NewBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *massaServiceClient) NewBlocksHeaders(ctx context.Context, opts ...grpc.CallOption) (MassaService_NewBlocksHeadersClient, error) {
	stream, err := c.cc.NewStream(ctx, &MassaService_ServiceDesc.Streams[1], "/massa.api.v1.MassaService/NewBlocksHeaders", opts...)
	if err != nil {
		return nil, err
	}
	x := &massaServiceNewBlocksHeadersClient{stream}
	return x, nil
}

type MassaService_NewBlocksHeadersClient interface {
	Send(*NewBlocksHeadersRequest) error
	Recv() (*NewBlocksHeadersResponse, error)
	grpc.ClientStream
}

type massaServiceNewBlocksHeadersClient struct {
	grpc.ClientStream
}

func (x *massaServiceNewBlocksHeadersClient) Send(m *NewBlocksHeadersRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *massaServiceNewBlocksHeadersClient) Recv() (*NewBlocksHeadersResponse, error) {
	m := new(NewBlocksHeadersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *massaServiceClient) NewEndorsements(ctx context.Context, opts ...grpc.CallOption) (MassaService_NewEndorsementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MassaService_ServiceDesc.Streams[2], "/massa.api.v1.MassaService/NewEndorsements", opts...)
	if err != nil {
		return nil, err
	}
	x := &massaServiceNewEndorsementsClient{stream}
	return x, nil
}

type MassaService_NewEndorsementsClient interface {
	Send(*NewEndorsementsRequest) error
	Recv() (*NewEndorsementsResponse, error)
	grpc.ClientStream
}

type massaServiceNewEndorsementsClient struct {
	grpc.ClientStream
}

func (x *massaServiceNewEndorsementsClient) Send(m *NewEndorsementsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *massaServiceNewEndorsementsClient) Recv() (*NewEndorsementsResponse, error) {
	m := new(NewEndorsementsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *massaServiceClient) NewFilledBlocks(ctx context.Context, opts ...grpc.CallOption) (MassaService_NewFilledBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &MassaService_ServiceDesc.Streams[3], "/massa.api.v1.MassaService/NewFilledBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &massaServiceNewFilledBlocksClient{stream}
	return x, nil
}

type MassaService_NewFilledBlocksClient interface {
	Send(*NewFilledBlocksRequest) error
	Recv() (*NewFilledBlocksResponse, error)
	grpc.ClientStream
}

type massaServiceNewFilledBlocksClient struct {
	grpc.ClientStream
}

func (x *massaServiceNewFilledBlocksClient) Send(m *NewFilledBlocksRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *massaServiceNewFilledBlocksClient) Recv() (*NewFilledBlocksResponse, error) {
	m := new(NewFilledBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *massaServiceClient) NewOperations(ctx context.Context, opts ...grpc.CallOption) (MassaService_NewOperationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MassaService_ServiceDesc.Streams[4], "/massa.api.v1.MassaService/NewOperations", opts...)
	if err != nil {
		return nil, err
	}
	x := &massaServiceNewOperationsClient{stream}
	return x, nil
}

type MassaService_NewOperationsClient interface {
	Send(*NewOperationsRequest) error
	Recv() (*NewOperationsResponse, error)
	grpc.ClientStream
}

type massaServiceNewOperationsClient struct {
	grpc.ClientStream
}

func (x *massaServiceNewOperationsClient) Send(m *NewOperationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *massaServiceNewOperationsClient) Recv() (*NewOperationsResponse, error) {
	m := new(NewOperationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *massaServiceClient) NewSlotExecutionOutputs(ctx context.Context, opts ...grpc.CallOption) (MassaService_NewSlotExecutionOutputsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MassaService_ServiceDesc.Streams[5], "/massa.api.v1.MassaService/NewSlotExecutionOutputs", opts...)
	if err != nil {
		return nil, err
	}
	x := &massaServiceNewSlotExecutionOutputsClient{stream}
	return x, nil
}

type MassaService_NewSlotExecutionOutputsClient interface {
	Send(*NewSlotExecutionOutputsRequest) error
	Recv() (*NewSlotExecutionOutputsResponse, error)
	grpc.ClientStream
}

type massaServiceNewSlotExecutionOutputsClient struct {
	grpc.ClientStream
}

func (x *massaServiceNewSlotExecutionOutputsClient) Send(m *NewSlotExecutionOutputsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *massaServiceNewSlotExecutionOutputsClient) Recv() (*NewSlotExecutionOutputsResponse, error) {
	m := new(NewSlotExecutionOutputsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *massaServiceClient) SendBlocks(ctx context.Context, opts ...grpc.CallOption) (MassaService_SendBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &MassaService_ServiceDesc.Streams[6], "/massa.api.v1.MassaService/SendBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &massaServiceSendBlocksClient{stream}
	return x, nil
}

type MassaService_SendBlocksClient interface {
	Send(*SendBlocksRequest) error
	Recv() (*SendBlocksResponse, error)
	grpc.ClientStream
}

type massaServiceSendBlocksClient struct {
	grpc.ClientStream
}

func (x *massaServiceSendBlocksClient) Send(m *SendBlocksRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *massaServiceSendBlocksClient) Recv() (*SendBlocksResponse, error) {
	m := new(SendBlocksResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *massaServiceClient) SendEndorsements(ctx context.Context, opts ...grpc.CallOption) (MassaService_SendEndorsementsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MassaService_ServiceDesc.Streams[7], "/massa.api.v1.MassaService/SendEndorsements", opts...)
	if err != nil {
		return nil, err
	}
	x := &massaServiceSendEndorsementsClient{stream}
	return x, nil
}

type MassaService_SendEndorsementsClient interface {
	Send(*SendEndorsementsRequest) error
	Recv() (*SendEndorsementsResponse, error)
	grpc.ClientStream
}

type massaServiceSendEndorsementsClient struct {
	grpc.ClientStream
}

func (x *massaServiceSendEndorsementsClient) Send(m *SendEndorsementsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *massaServiceSendEndorsementsClient) Recv() (*SendEndorsementsResponse, error) {
	m := new(SendEndorsementsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *massaServiceClient) SendOperations(ctx context.Context, opts ...grpc.CallOption) (MassaService_SendOperationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MassaService_ServiceDesc.Streams[8], "/massa.api.v1.MassaService/SendOperations", opts...)
	if err != nil {
		return nil, err
	}
	x := &massaServiceSendOperationsClient{stream}
	return x, nil
}

type MassaService_SendOperationsClient interface {
	Send(*SendOperationsRequest) error
	Recv() (*SendOperationsResponse, error)
	grpc.ClientStream
}

type massaServiceSendOperationsClient struct {
	grpc.ClientStream
}

func (x *massaServiceSendOperationsClient) Send(m *SendOperationsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *massaServiceSendOperationsClient) Recv() (*SendOperationsResponse, error) {
	m := new(SendOperationsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *massaServiceClient) TransactionsThroughput(ctx context.Context, opts ...grpc.CallOption) (MassaService_TransactionsThroughputClient, error) {
	stream, err := c.cc.NewStream(ctx, &MassaService_ServiceDesc.Streams[9], "/massa.api.v1.MassaService/TransactionsThroughput", opts...)
	if err != nil {
		return nil, err
	}
	x := &massaServiceTransactionsThroughputClient{stream}
	return x, nil
}

type MassaService_TransactionsThroughputClient interface {
	Send(*TransactionsThroughputRequest) error
	Recv() (*TransactionsThroughputResponse, error)
	grpc.ClientStream
}

type massaServiceTransactionsThroughputClient struct {
	grpc.ClientStream
}

func (x *massaServiceTransactionsThroughputClient) Send(m *TransactionsThroughputRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *massaServiceTransactionsThroughputClient) Recv() (*TransactionsThroughputResponse, error) {
	m := new(TransactionsThroughputResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MassaServiceServer is the server API for MassaService service.
// All implementations must embed UnimplementedMassaServiceServer
// for forward compatibility
type MassaServiceServer interface {
	// Get blocks by ids
	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error)
	// Get blocks by slots
	GetBlocksBySlots(context.Context, *GetBlocksBySlotsRequest) (*GetBlocksBySlotsResponse, error)
	// Get datastore entries
	GetDatastoreEntries(context.Context, *GetDatastoreEntriesRequest) (*GetDatastoreEntriesResponse, error)
	// Get largest stakers
	GetLargestStakers(context.Context, *GetLargestStakersRequest) (*GetLargestStakersResponse, error)
	// Get next block best parents
	GetNextBlockBestParents(context.Context, *GetNextBlockBestParentsRequest) (*GetNextBlockBestParentsResponse, error)
	// Get operations
	GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error)
	// Get smart contracts execution events
	GetScExecutionEvents(context.Context, *GetScExecutionEventsRequest) (*GetScExecutionEventsResponse, error)
	// Get selector draws
	GetSelectorDraws(context.Context, *GetSelectorDrawsRequest) (*GetSelectorDrawsResponse, error)
	// Get transactions throughput
	GetTransactionsThroughput(context.Context, *GetTransactionsThroughputRequest) (*GetTransactionsThroughputResponse, error)
	// Get node version
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	// New received and produced blocks
	NewBlocks(MassaService_NewBlocksServer) error
	// New received and produced blocks headers
	NewBlocksHeaders(MassaService_NewBlocksHeadersServer) error
	// New received and produced endorsements
	NewEndorsements(MassaService_NewEndorsementsServer) error
	// New received and produced blocks with operations
	NewFilledBlocks(MassaService_NewFilledBlocksServer) error
	// New received and produced operations
	NewOperations(MassaService_NewOperationsServer) error
	// New received and slot execution events
	NewSlotExecutionOutputs(MassaService_NewSlotExecutionOutputsServer) error
	// Send blocks
	SendBlocks(MassaService_SendBlocksServer) error
	// Send endorsements
	SendEndorsements(MassaService_SendEndorsementsServer) error
	// Send operations
	SendOperations(MassaService_SendOperationsServer) error
	// Transactions throughput
	TransactionsThroughput(MassaService_TransactionsThroughputServer) error
	mustEmbedUnimplementedMassaServiceServer()
}

// UnimplementedMassaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMassaServiceServer struct {
}

func (UnimplementedMassaServiceServer) GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocks not implemented")
}
func (UnimplementedMassaServiceServer) GetBlocksBySlots(context.Context, *GetBlocksBySlotsRequest) (*GetBlocksBySlotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlocksBySlots not implemented")
}
func (UnimplementedMassaServiceServer) GetDatastoreEntries(context.Context, *GetDatastoreEntriesRequest) (*GetDatastoreEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatastoreEntries not implemented")
}
func (UnimplementedMassaServiceServer) GetLargestStakers(context.Context, *GetLargestStakersRequest) (*GetLargestStakersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLargestStakers not implemented")
}
func (UnimplementedMassaServiceServer) GetNextBlockBestParents(context.Context, *GetNextBlockBestParentsRequest) (*GetNextBlockBestParentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextBlockBestParents not implemented")
}
func (UnimplementedMassaServiceServer) GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperations not implemented")
}
func (UnimplementedMassaServiceServer) GetScExecutionEvents(context.Context, *GetScExecutionEventsRequest) (*GetScExecutionEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScExecutionEvents not implemented")
}
func (UnimplementedMassaServiceServer) GetSelectorDraws(context.Context, *GetSelectorDrawsRequest) (*GetSelectorDrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelectorDraws not implemented")
}
func (UnimplementedMassaServiceServer) GetTransactionsThroughput(context.Context, *GetTransactionsThroughputRequest) (*GetTransactionsThroughputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsThroughput not implemented")
}
func (UnimplementedMassaServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedMassaServiceServer) NewBlocks(MassaService_NewBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method NewBlocks not implemented")
}
func (UnimplementedMassaServiceServer) NewBlocksHeaders(MassaService_NewBlocksHeadersServer) error {
	return status.Errorf(codes.Unimplemented, "method NewBlocksHeaders not implemented")
}
func (UnimplementedMassaServiceServer) NewEndorsements(MassaService_NewEndorsementsServer) error {
	return status.Errorf(codes.Unimplemented, "method NewEndorsements not implemented")
}
func (UnimplementedMassaServiceServer) NewFilledBlocks(MassaService_NewFilledBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method NewFilledBlocks not implemented")
}
func (UnimplementedMassaServiceServer) NewOperations(MassaService_NewOperationsServer) error {
	return status.Errorf(codes.Unimplemented, "method NewOperations not implemented")
}
func (UnimplementedMassaServiceServer) NewSlotExecutionOutputs(MassaService_NewSlotExecutionOutputsServer) error {
	return status.Errorf(codes.Unimplemented, "method NewSlotExecutionOutputs not implemented")
}
func (UnimplementedMassaServiceServer) SendBlocks(MassaService_SendBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method SendBlocks not implemented")
}
func (UnimplementedMassaServiceServer) SendEndorsements(MassaService_SendEndorsementsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendEndorsements not implemented")
}
func (UnimplementedMassaServiceServer) SendOperations(MassaService_SendOperationsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendOperations not implemented")
}
func (UnimplementedMassaServiceServer) TransactionsThroughput(MassaService_TransactionsThroughputServer) error {
	return status.Errorf(codes.Unimplemented, "method TransactionsThroughput not implemented")
}
func (UnimplementedMassaServiceServer) mustEmbedUnimplementedMassaServiceServer() {}

// UnsafeMassaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MassaServiceServer will
// result in compilation errors.
type UnsafeMassaServiceServer interface {
	mustEmbedUnimplementedMassaServiceServer()
}

func RegisterMassaServiceServer(s grpc.ServiceRegistrar, srv MassaServiceServer) {
	s.RegisterService(&MassaService_ServiceDesc, srv)
}

func _MassaService_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MassaServiceServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/massa.api.v1.MassaService/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MassaServiceServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MassaService_GetBlocksBySlots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksBySlotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MassaServiceServer).GetBlocksBySlots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/massa.api.v1.MassaService/GetBlocksBySlots",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MassaServiceServer).GetBlocksBySlots(ctx, req.(*GetBlocksBySlotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MassaService_GetDatastoreEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatastoreEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MassaServiceServer).GetDatastoreEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/massa.api.v1.MassaService/GetDatastoreEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MassaServiceServer).GetDatastoreEntries(ctx, req.(*GetDatastoreEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MassaService_GetLargestStakers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLargestStakersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MassaServiceServer).GetLargestStakers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/massa.api.v1.MassaService/GetLargestStakers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MassaServiceServer).GetLargestStakers(ctx, req.(*GetLargestStakersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MassaService_GetNextBlockBestParents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextBlockBestParentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MassaServiceServer).GetNextBlockBestParents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/massa.api.v1.MassaService/GetNextBlockBestParents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MassaServiceServer).GetNextBlockBestParents(ctx, req.(*GetNextBlockBestParentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MassaService_GetOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MassaServiceServer).GetOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/massa.api.v1.MassaService/GetOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MassaServiceServer).GetOperations(ctx, req.(*GetOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MassaService_GetScExecutionEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScExecutionEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MassaServiceServer).GetScExecutionEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/massa.api.v1.MassaService/GetScExecutionEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MassaServiceServer).GetScExecutionEvents(ctx, req.(*GetScExecutionEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MassaService_GetSelectorDraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelectorDrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MassaServiceServer).GetSelectorDraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/massa.api.v1.MassaService/GetSelectorDraws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MassaServiceServer).GetSelectorDraws(ctx, req.(*GetSelectorDrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MassaService_GetTransactionsThroughput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsThroughputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MassaServiceServer).GetTransactionsThroughput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/massa.api.v1.MassaService/GetTransactionsThroughput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MassaServiceServer).GetTransactionsThroughput(ctx, req.(*GetTransactionsThroughputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MassaService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MassaServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/massa.api.v1.MassaService/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MassaServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MassaService_NewBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MassaServiceServer).NewBlocks(&massaServiceNewBlocksServer{stream})
}

type MassaService_NewBlocksServer interface {
	Send(*NewBlocksResponse) error
	Recv() (*NewBlocksRequest, error)
	grpc.ServerStream
}

type massaServiceNewBlocksServer struct {
	grpc.ServerStream
}

func (x *massaServiceNewBlocksServer) Send(m *NewBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *massaServiceNewBlocksServer) Recv() (*NewBlocksRequest, error) {
	m := new(NewBlocksRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MassaService_NewBlocksHeaders_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MassaServiceServer).NewBlocksHeaders(&massaServiceNewBlocksHeadersServer{stream})
}

type MassaService_NewBlocksHeadersServer interface {
	Send(*NewBlocksHeadersResponse) error
	Recv() (*NewBlocksHeadersRequest, error)
	grpc.ServerStream
}

type massaServiceNewBlocksHeadersServer struct {
	grpc.ServerStream
}

func (x *massaServiceNewBlocksHeadersServer) Send(m *NewBlocksHeadersResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *massaServiceNewBlocksHeadersServer) Recv() (*NewBlocksHeadersRequest, error) {
	m := new(NewBlocksHeadersRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MassaService_NewEndorsements_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MassaServiceServer).NewEndorsements(&massaServiceNewEndorsementsServer{stream})
}

type MassaService_NewEndorsementsServer interface {
	Send(*NewEndorsementsResponse) error
	Recv() (*NewEndorsementsRequest, error)
	grpc.ServerStream
}

type massaServiceNewEndorsementsServer struct {
	grpc.ServerStream
}

func (x *massaServiceNewEndorsementsServer) Send(m *NewEndorsementsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *massaServiceNewEndorsementsServer) Recv() (*NewEndorsementsRequest, error) {
	m := new(NewEndorsementsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MassaService_NewFilledBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MassaServiceServer).NewFilledBlocks(&massaServiceNewFilledBlocksServer{stream})
}

type MassaService_NewFilledBlocksServer interface {
	Send(*NewFilledBlocksResponse) error
	Recv() (*NewFilledBlocksRequest, error)
	grpc.ServerStream
}

type massaServiceNewFilledBlocksServer struct {
	grpc.ServerStream
}

func (x *massaServiceNewFilledBlocksServer) Send(m *NewFilledBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *massaServiceNewFilledBlocksServer) Recv() (*NewFilledBlocksRequest, error) {
	m := new(NewFilledBlocksRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MassaService_NewOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MassaServiceServer).NewOperations(&massaServiceNewOperationsServer{stream})
}

type MassaService_NewOperationsServer interface {
	Send(*NewOperationsResponse) error
	Recv() (*NewOperationsRequest, error)
	grpc.ServerStream
}

type massaServiceNewOperationsServer struct {
	grpc.ServerStream
}

func (x *massaServiceNewOperationsServer) Send(m *NewOperationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *massaServiceNewOperationsServer) Recv() (*NewOperationsRequest, error) {
	m := new(NewOperationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MassaService_NewSlotExecutionOutputs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MassaServiceServer).NewSlotExecutionOutputs(&massaServiceNewSlotExecutionOutputsServer{stream})
}

type MassaService_NewSlotExecutionOutputsServer interface {
	Send(*NewSlotExecutionOutputsResponse) error
	Recv() (*NewSlotExecutionOutputsRequest, error)
	grpc.ServerStream
}

type massaServiceNewSlotExecutionOutputsServer struct {
	grpc.ServerStream
}

func (x *massaServiceNewSlotExecutionOutputsServer) Send(m *NewSlotExecutionOutputsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *massaServiceNewSlotExecutionOutputsServer) Recv() (*NewSlotExecutionOutputsRequest, error) {
	m := new(NewSlotExecutionOutputsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MassaService_SendBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MassaServiceServer).SendBlocks(&massaServiceSendBlocksServer{stream})
}

type MassaService_SendBlocksServer interface {
	Send(*SendBlocksResponse) error
	Recv() (*SendBlocksRequest, error)
	grpc.ServerStream
}

type massaServiceSendBlocksServer struct {
	grpc.ServerStream
}

func (x *massaServiceSendBlocksServer) Send(m *SendBlocksResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *massaServiceSendBlocksServer) Recv() (*SendBlocksRequest, error) {
	m := new(SendBlocksRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MassaService_SendEndorsements_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MassaServiceServer).SendEndorsements(&massaServiceSendEndorsementsServer{stream})
}

type MassaService_SendEndorsementsServer interface {
	Send(*SendEndorsementsResponse) error
	Recv() (*SendEndorsementsRequest, error)
	grpc.ServerStream
}

type massaServiceSendEndorsementsServer struct {
	grpc.ServerStream
}

func (x *massaServiceSendEndorsementsServer) Send(m *SendEndorsementsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *massaServiceSendEndorsementsServer) Recv() (*SendEndorsementsRequest, error) {
	m := new(SendEndorsementsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MassaService_SendOperations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MassaServiceServer).SendOperations(&massaServiceSendOperationsServer{stream})
}

type MassaService_SendOperationsServer interface {
	Send(*SendOperationsResponse) error
	Recv() (*SendOperationsRequest, error)
	grpc.ServerStream
}

type massaServiceSendOperationsServer struct {
	grpc.ServerStream
}

func (x *massaServiceSendOperationsServer) Send(m *SendOperationsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *massaServiceSendOperationsServer) Recv() (*SendOperationsRequest, error) {
	m := new(SendOperationsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MassaService_TransactionsThroughput_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MassaServiceServer).TransactionsThroughput(&massaServiceTransactionsThroughputServer{stream})
}

type MassaService_TransactionsThroughputServer interface {
	Send(*TransactionsThroughputResponse) error
	Recv() (*TransactionsThroughputRequest, error)
	grpc.ServerStream
}

type massaServiceTransactionsThroughputServer struct {
	grpc.ServerStream
}

func (x *massaServiceTransactionsThroughputServer) Send(m *TransactionsThroughputResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *massaServiceTransactionsThroughputServer) Recv() (*TransactionsThroughputRequest, error) {
	m := new(TransactionsThroughputRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MassaService_ServiceDesc is the grpc.ServiceDesc for MassaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MassaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "massa.api.v1.MassaService",
	HandlerType: (*MassaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlocks",
			Handler:    _MassaService_GetBlocks_Handler,
		},
		{
			MethodName: "GetBlocksBySlots",
			Handler:    _MassaService_GetBlocksBySlots_Handler,
		},
		{
			MethodName: "GetDatastoreEntries",
			Handler:    _MassaService_GetDatastoreEntries_Handler,
		},
		{
			MethodName: "GetLargestStakers",
			Handler:    _MassaService_GetLargestStakers_Handler,
		},
		{
			MethodName: "GetNextBlockBestParents",
			Handler:    _MassaService_GetNextBlockBestParents_Handler,
		},
		{
			MethodName: "GetOperations",
			Handler:    _MassaService_GetOperations_Handler,
		},
		{
			MethodName: "GetScExecutionEvents",
			Handler:    _MassaService_GetScExecutionEvents_Handler,
		},
		{
			MethodName: "GetSelectorDraws",
			Handler:    _MassaService_GetSelectorDraws_Handler,
		},
		{
			MethodName: "GetTransactionsThroughput",
			Handler:    _MassaService_GetTransactionsThroughput_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _MassaService_GetVersion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewBlocks",
			Handler:       _MassaService_NewBlocks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewBlocksHeaders",
			Handler:       _MassaService_NewBlocksHeaders_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewEndorsements",
			Handler:       _MassaService_NewEndorsements_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewFilledBlocks",
			Handler:       _MassaService_NewFilledBlocks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewOperations",
			Handler:       _MassaService_NewOperations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NewSlotExecutionOutputs",
			Handler:       _MassaService_NewSlotExecutionOutputs_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendBlocks",
			Handler:       _MassaService_SendBlocks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendEndorsements",
			Handler:       _MassaService_SendEndorsements_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendOperations",
			Handler:       _MassaService_SendOperations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TransactionsThroughput",
			Handler:       _MassaService_TransactionsThroughput_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
